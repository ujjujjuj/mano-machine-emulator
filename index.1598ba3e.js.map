{"mappings":"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","sources":["src/keyboard.js","src/screen.js","src/assembler.js","src/emulator.js","src/utils.js","src/main.js"],"sourcesContent":["class Keyboard {\n    constructor() {\n        this.key = \"\";\n        this.state = new Set();\n        this.waiting = false;\n        document.addEventListener(\"keydown\", this.keydown.bind(this));\n        document.addEventListener(\"keyup\", this.keyup.bind(this));\n    }\n\n    onInput(fn) {\n        console.log(fn);\n        this.input = fn;\n    }\n\n    keydown(e) {\n        const key = e.keyCode;\n        if (this.state.has(key)) return;\n        this.state.add(key);\n        // console.log(\">>> \"+e.key);\n        this.input(key);\n    }\n\n    keyup(e) {\n        const key = e.keyCode;\n        this.state.delete(key);\n    }\n}\n\nconst keyboard = new Keyboard();\n\nexport default keyboard;\n","class Screen {\n    constructor(w, h) {\n        this.width = w;\n        this.height = Math.round(h / 2.28);\n        this.element = document.querySelector(\".screen\");\n        this.element.style = `width:${w}rem;height:${h}rem`;\n        this.text = \"\";\n        this.blinkInterval = setInterval(this.blink.bind(this), 500);\n        this.isBlink = false;\n    }\n    updateText() {\n        this.element.innerText = this.text + (this.isBlink ? \"|\" : \"\");\n    }\n    blink() {\n        this.updateText();\n        this.isBlink = !this.isBlink;\n    }\n    addText(code) {\n        if (code === \"clear\") {\n            this.text = \"\";\n            this.updateText();\n            return;\n        }\n        this.text += String.fromCharCode(code);\n        if (code === 13) {\n            const nLines = this.text.match(/\\r/g)?.length ?? 0;\n            if (nLines == this.height - 1) {\n                this.text = this.text.split(\"\\r\").slice(1).join(\"\\r\");\n            }\n        }\n\n        this.updateText();\n    }\n}\n\nconst screen = new Screen(80, 50);\n\nexport default screen;\n\n// setTimeout(() => {\n//     screen.addText(\"\\nProgram halted...\");\n// }, 2500);\n","const instructions = {\n    pseudo: [\"ORG\", \"DEC\", \"HEX\", \"END\"],\n    mr: [\"AND\", \"ADD\", \"LDA\", \"STA\", \"BUN\", \"BSA\", \"ISZ\"],\n    nmr: [\n        \"CLA\",\n        \"CLE\",\n        \"CMA\",\n        \"CME\",\n        \"CIR\",\n        \"CIL\",\n        \"INC\",\n        \"SPA\",\n        \"SNA\",\n        \"SZA\",\n        \"SZE\",\n        \"HLT\",\n        \"INP\",\n        \"OUT\",\n        \"SKI\",\n        \"SKO\",\n        \"ION\",\n        \"IOF\",\n    ],\n};\nconst nmrcodes = [\n    0b0111100000000000, 0b0111010000000000, 0b0111001000000000, 0b0111000100000000, 0b0111000010000000,\n    0b0111000001000000, 0b0111000000100000, 0b0111000000010000, 0b0111000000001000, 0b0111000000000100,\n    0b0111000000000010, 0b0111000000000001, 0b1111100000000000, 0b1111010000000000, 0b1111001000000000,\n    0b1111000100000000, 0b1111000010000000, 0b1111000001000000,\n];\n\nclass Assembler {\n    constructor() {}\n\n    tokenize(code) {\n        code = code.trim();\n        let tokens = [];\n        for (let line of code.split(\"\\n\")) {\n            line = line\n                .split(\"/\")[0]\n                .trim()\n                .replaceAll(\",\", \", \")\n                .replaceAll(/ +/g, \" \")\n                .split(\" \")\n                .filter((a) => a.length > 0);\n            if (line.length === 0) continue;\n            tokens.push(line);\n        }\n        return tokens;\n    }\n\n    assemble(code) {\n        const symbols = {};\n        const tokens = this.tokenize(code);\n\n        // first pass\n        let lc = 0;\n        for (const token of tokens) {\n            let first = token[0];\n            if (first === \"ORG\") {\n                lc = Number(\"0x\" + token[1]);\n            } else if (first === \"END\") {\n                break;\n            } else {\n                if (first.includes(\",\")) {\n                    symbols[first.replace(\",\", \"\")] = lc;\n                }\n                lc++;\n            }\n        }\n        console.log(\"Finished first pass, symbol table is\", symbols);\n\n        // second pass\n        const data = new ArrayBuffer(4096 * 2);\n        const view = new DataView(data);\n        lc = 0;\n        for (let token of tokens) {\n            if (token[0].includes(\",\")) {\n                token = token.slice(1);\n            }\n            if (instructions.pseudo.includes(token[0])) {\n                if (token[0] === \"ORG\") {\n                    lc = parseInt(\"0x\" + token[1]);\n                    continue;\n                } else if (token[0] === \"END\") {\n                    break;\n                } else {\n                    let val;\n                    if (Object.keys(symbols).includes(token[1])) {\n                        // is a symbol\n                        val = symbols[token[1]];\n                    } else {\n                        if (token[0] === \"HEX\") {\n                            if (Object.keys(symbols).includes(token[1])){\n                                token[1] = symbols[token[1]].toString(16)\n                            }\n                            token[1] = \"0x\" + token[1];\n                        }\n                        val = Number(token[1]);\n                    }\n                    val = val % 65536;\n                    view.setUint16(lc * 2, val, false);\n                }\n            } else if (instructions.mr.includes(token[0])) {\n                let inst = instructions.mr.indexOf(token[0]) << 12;\n                if (token[token.length - 1] === \"I\") {\n                    inst |= 0x8000;\n                }\n                inst |= symbols[token[1]];\n                view.setUint16(lc * 2, inst, false);\n            } else if (instructions.nmr.includes(token[0])) {\n                let inst = nmrcodes[instructions.nmr.indexOf(token[0])];\n                view.setUint16(lc * 2, inst, false);\n            } else {\n                alert(`Invalid instruction: ${token}`);\n                throw `Invalid instruction: ${token}`;\n            }\n\n            lc++;\n        }\n        console.log(\"Finished second pass, RAM:\");\n\n        // for (let i = 0; i < 4096 * 2; i += 2) {\n        //     const val = view.getUint16(i, false);\n        //     if (val != 0) {\n        //         console.log(`0x${(i / 2).toString(16).padStart(4, \"0\")}: ${val}`);\n        //     }\n        // }\n\n        return data;\n    }\n}\n\nconst assembler = new Assembler();\n\nexport default assembler;\n","class Emulator {\n    constructor() {\n        this.reset();\n        this.ram = null;\n        this.view = null;\n    }\n    reset() {\n        if (this.isRunning && !this.isHalted) return;\n        console.log(\"Resetting emulator...\");\n        this.registers = {\n            AR: 0,\n            PC: 0,\n            DR: 0,\n            AC: 0,\n            IR: 0,\n            TP: 0,\n            OUTR: 0,\n            INPR: 0,\n            SC: 0,\n        };\n        this.ff = {\n            I: 0,\n            S: 0,\n            E: 0,\n            R: 0,\n            IEN: 0,\n            FGI: 0,\n            FGO: 1,\n        };\n        if (this.rom) {\n            this.ram = this.rom.slice(0);\n            this.view = new DataView(this.ram);\n        }\n        this.halted = false;\n        this.isRunning = false;\n        this.keyboardBuffer = [];\n        this.keyboardPromiseResolver = null;\n        if (this.output) {\n            this.output(\"clear\");\n        }\n    }\n    setRam(buf) {\n        this.rom = buf;\n        this.ram = buf.slice(0);\n        this.view = new DataView(this.ram);\n    }\n    getInput(letter) {\n        if (this.keyboardPromiseResolver) this.keyboardPromiseResolver();\n        this.ff.FGI = 0;\n        this.keyboardBuffer.push(letter);\n    }\n    onOutput(fn) {\n        this.output = fn;\n    }\n    read(off) {\n        return this.view.getUint16(off * 2, false);\n    }\n    write(off, data) {\n        this.view.setUint16(off * 2, data, false);\n    }\n    async run() {\n        if (this.isRunning) return;\n        this.reset();\n        this.isRunning = true;\n        while (true) {\n            if (this.halted) break;\n            await this._stepInstruction();\n            // await new Promise((resolve) => setInterval(resolve, 0));\n        }\n        for (let char of \"\\n\\nFinished execution...\") {\n            this.output(char.charCodeAt(0));\n        }\n        // console.log(new Uint8Array(this.ram));\n        this.isRunning = false;\n    }\n    async _stepInstruction() {\n        // console.log(this.registers.PC.toString(16));\n        const inst = this.read(this.registers.PC);\n        this.registers.PC++;\n\n        this.ff.I = inst >> 15;\n        let opcode = (inst & 0b0111000000000000) >> 12;\n\n        if (opcode == 0b111) {\n            switch (inst) {\n                case 0x7800: {\n                    this.registers.AC = 0;\n                    break;\n                }\n                case 0x7400: {\n                    this.ff.E = 0;\n                    break;\n                }\n                case 0x7200: {\n                    this.registers.AC = ~this.registers.AC & 0b1111111111111111;\n                    break;\n                }\n                case 0x7100: {\n                    this.ff.E = ~this.ff.E & 1;\n                    break;\n                }\n                case 0x7080: {\n                    this.ff.E = this.registers.AC & 1;\n                    this.registers.AC >>= 1;\n                    this.registers.AC |= this.ff.E << 15;\n                    break;\n                }\n                case 0x7040: {\n                    this.ff.E = (this.registers.AC & 0b1000000000000000) >> 15;\n                    this.registers.AC = (this.registers.AC << 1) & 0xffff;\n                    this.registers.AC |= this.ff.E;\n                    break;\n                }\n                case 0x7020: {\n                    this.registers.AC++;\n                    break;\n                }\n                case 0x7010: {\n                    if (this.registers.AC >= 0) {\n                        this.registers.PC++;\n                    }\n                    break;\n                }\n                case 0x7008: {\n                    if ((this.registers.AC & 0x8000) > 0) {\n                        this.registers.PC++;\n                    }\n                    break;\n                }\n                case 0x7004: {\n                    if (this.registers.AC === 0) {\n                        this.registers.PC++;\n                    }\n                    break;\n                }\n                case 0x7002: {\n                    if (!this.ff.E) {\n                        this.registers.PC++;\n                    }\n                    break;\n                }\n                case 0x7001: {\n                    this.halted = true;\n                    break;\n                }\n                case 0xf800: {\n                    if (this.keyboardBuffer.length === 0) {\n                        await new Promise((resolve) => {\n                            this.keyboardPromiseResolver = resolve;\n                        });\n                    }\n                    this.registers.AC = this.keyboardBuffer.shift();\n                    if (this.keyboardBuffer.length === 0) {\n                        this.ff.FGI = 1;\n                    }\n                    break;\n                }\n                case 0xf400: {\n                    this.output(this.registers.AC);\n                    break;\n                }\n                case 0xf100: {\n                    if (this.ff.FGI === 1) {\n                        this.registers.PC++;\n                    }\n                    break;\n                }\n                case 0xf200: {\n                    if (this.ff.FGO === 1) {\n                        this.registers.PC++;\n                    }\n                    break;\n                }\n                case 0xf080: {\n                    this.ff.IEN = 1;\n                    break;\n                }\n                case 0xf040: {\n                    this.ff.IEN = 0;\n                    break;\n                }\n                default: {\n                    throw `Invalid opcode ${inst}`;\n                    break;\n                }\n            }\n        } else {\n            this.registers.AR = inst & 0b111111111111;\n            if (this.ff.I === 1) {\n                this.registers.AR = this.read(this.registers.AR);\n            }\n            switch (opcode) {\n                case 0: {\n                    this.registers.AC &= this.read(this.registers.AR);\n                    break;\n                }\n                case 1: {\n                    this.registers.AC = (this.registers.AC + this.read(this.registers.AR)) % 0x10000;\n                    break;\n                }\n                case 2: {\n                    this.registers.AC = this.read(this.registers.AR);\n                    break;\n                }\n                case 3: {\n                    this.write(this.registers.AR, this.registers.AC);\n                    break;\n                }\n                case 4: {\n                    this.registers.PC = this.registers.AR;\n                    break;\n                }\n                case 5: {\n                    this.write(this.registers.AR++, this.registers.PC);\n                    this.registers.PC = this.registers.AR;\n                    break;\n                }\n                case 6: {\n                    this.registers.DR = this.read(this.registers.AR);\n                    this.registers.DR = (this.registers.DR + 1) % 65536;\n                    this.write(this.registers.AR, this.registers.DR);\n                    if (this.registers.DR === 0) {\n                        this.registers.PC++;\n                    }\n                    break;\n                }\n            }\n        }\n    }\n}\n\nconst emulator = new Emulator();\n\nexport default emulator;\n","export const downloadArrayBuffer = (buf) => {\n    const blob = new Blob([buf], { type: \"application/octet-stream\" });\n    const url = window.URL.createObjectURL(blob);\n\n    const a = document.createElement(\"a\");\n    a.style = \"display:none;\";\n    a.href = url;\n    a.download = `mano-rom-${Date.now()}.bin`;\n    a.click();\n    setTimeout(() => {\n        a.remove();\n        window.URL.revokeObjectURL(url);\n    }, 100);\n};\n","import keyboard from \"./keyboard.js\";\nimport screen from \"./screen.js\";\nimport assembler from \"./assembler.js\";\nimport emulator from \"./emulator.js\";\nimport { downloadArrayBuffer } from \"./utils.js\";\n\nemulator.onOutput(screen.addText.bind(screen));\nkeyboard.onInput(emulator.getInput.bind(emulator));\n\ndocument.getElementById(\"assemble\").addEventListener(\"click\", (e) => {\n    e.target.disabled = true;\n    document.getElementById(\"execute\").style = \"\";\n    document.getElementById(\"download\").style = \"\";\n    document.getElementById(\"reload\").style = \"\";\n    document.querySelector(\"select\").disabled = true;\n\n    e.preventDefault();\n    const code = document.querySelector(\"textarea\").value;\n    const buf = assembler.assemble(code);\n    emulator.setRam(buf);\n});\n\ndocument.getElementById(\"download\").addEventListener(\"click\", (e) => {\n    downloadArrayBuffer(emulator.ram);\n});\n\ndocument.getElementById(\"reload\").addEventListener(\"click\", (e) => {\n    window.location.reload();\n});\n\ndocument.getElementById(\"execute\").addEventListener(\"click\", (e) => {\n    e.target.disabled = true;\n    emulator.run();\n});\n\ndocument.querySelector(\"select\").addEventListener(\"change\", (e) => {\n    if (e.target.value === \"custom\") {\n        document.querySelector(\"textarea\").value = \"\";\n        document.querySelector(\"textarea\").readOnly = false;\n    } else {\n        fetch(e.target.value)\n            .then((res) => res.text())\n            .then((code) => {\n                document.querySelector(\"textarea\").value = code;\n                document.querySelector(\"textarea\").readOnly = true;\n            });\n    }\n});\n"],"names":["$4e932a7b712c6add$export$2e2bcd8739ae039","constructor","this","key","state","Set","waiting","document","addEventListener","keydown","bind","keyup","onInput","fn","console","log","input","e","keyCode","has","add","delete","$911191733cf34e1f$export$2e2bcd8739ae039","w","h","width","height","Math","round","element","querySelector","style","text","blinkInterval","setInterval","blink","isBlink","updateText","innerText","addText","code","String","fromCharCode","match","length","split","slice","join","$9ba411579167366f$var$instructions","pseudo","mr","nmr","$9ba411579167366f$var$nmrcodes","$9ba411579167366f$export$2e2bcd8739ae039","tokenize","trim","tokens","line","replaceAll","filter","a","push","assemble","symbols","lc","token","first","Number","includes","replace","data","ArrayBuffer","view","DataView","token1","parseInt","val","Object","keys","toString","setUint16","inst","indexOf","alert","inst1","$12f1efd3eb3a3302$export$2e2bcd8739ae039","reset","ram","isRunning","isHalted","registers","AR","PC","DR","AC","IR","TP","OUTR","INPR","SC","ff","I","S","E","R","IEN","FGI","FGO","rom","halted","keyboardBuffer","keyboardPromiseResolver","output","setRam","buf","getInput","letter","onOutput","read","off","getUint16","write","async","_stepInstruction","char","charCodeAt","opcode","Promise","resolve","shift","$820877bea407f5fe$export$ad9ba480fd6861ba","blob","Blob","type","url","window","URL","createObjectURL","createElement","href","download","Date","now","click","setTimeout","remove","revokeObjectURL","getElementById","target","disabled","preventDefault","value","location","reload","run","readOnly","fetch","then","res"],"version":3,"file":"index.1598ba3e.js.map"}